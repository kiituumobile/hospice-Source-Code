// Decompiled by DJ v3.5.5.77 Copyright 2003 Atanas Neshkov  Date: 12/4/2012 12:10:22 PM
// Home Page : http://members.fortunecity.com/neshkov/dj.html  - Check often for new version!
// Decompiler options: packimports(3) 
// Source File Name:   AbstractDataAccessObject.java

package com.dts.core.dao;

import com.dts.core.util.LoggerManager;
import java.io.PrintStream;
import java.sql.*;
import java.util.Properties;

public class AbstractDataAccessObject
{

    public AbstractDataAccessObject()
    {
    }

    public Properties getProperties()
    {
        return props;
    }

    public void setProperties(Properties props)
    {
        props = props;
    }

    public Connection getConnection()
    {
        try
        {
            Properties p = getProperties();
            System.out.println((new StringBuilder("<<<<<<<<eee>>>>>>>>>>")).append(p.getProperty("driver")).toString());
            System.out.println((new StringBuilder("<<<<<<<<eee>>>>>>>>>>")).append(p.getProperty("duser")).toString());
            Class.forName(p.getProperty("driver"));
            con = DriverManager.getConnection(p.getProperty("url"), p.getProperty("duser"), p.getProperty("dpass"));
            System.out.println((new StringBuilder("<<<<<<<<oooooo>>>>>>>>>>")).append(con).toString());
        }
        catch(ClassNotFoundException cnf)
        {
            LoggerManager.writeLogWarning(cnf);
        }
        catch(SQLException se)
        {
            LoggerManager.writeLogWarning(se);
        }
        return con;
    }

    public int getSequenceID(String tableName, String pkid)
    {
        int id = 0;
        con = getConnection();
        Statement st = con.createStatement();
        ResultSet rs = st.executeQuery((new StringBuilder("select max(")).append(pkid).append(") from ").append(tableName).toString());
        if(rs.next())
            id = rs.getInt(1);
        id++;
        break MISSING_BLOCK_LABEL_192;
        SQLException se;
        se;
        LoggerManager.writeLogWarning(se);
        try
        {
            con.close();
        }
        catch(SQLException se)
        {
            LoggerManager.writeLogWarning(se);
        }
        catch(Exception e)
        {
            LoggerManager.writeLogWarning(e);
        }
        break MISSING_BLOCK_LABEL_221;
        Exception e;
        e;
        LoggerManager.writeLogWarning(e);
        try
        {
            con.close();
        }
        catch(SQLException se)
        {
            LoggerManager.writeLogWarning(se);
        }
        catch(Exception e)
        {
            LoggerManager.writeLogWarning(e);
        }
        break MISSING_BLOCK_LABEL_221;
        Exception exception;
        exception;
        try
        {
            con.close();
        }
        catch(SQLException se)
        {
            LoggerManager.writeLogWarning(se);
        }
        catch(Exception e)
        {
            LoggerManager.writeLogWarning(e);
        }
        throw exception;
        try
        {
            con.close();
        }
        catch(SQLException se)
        {
            LoggerManager.writeLogWarning(se);
        }
        catch(Exception e)
        {
            LoggerManager.writeLogWarning(e);
        }
        return id;
    }

    Connection con;
    static Properties props;
}